{"name":"Exdi","tagline":"Dependency injection container for JavaScript","body":"exdi [![Build Status](https://travis-ci.org/dariuszp/exdi.png?branch=master)](https://travis-ci.org/dariuszp/exdi)\r\n====\r\n\r\nDependency injection container for JavaScript\r\n\r\n## 1.3.0\r\n\r\n* now ALL methods accept arrays or functions to handle minified javascript\r\n\r\nProblem. This code will fail if we minify JavaScript:\r\n```JavaScript\r\ncontainer.set('surname', 'Półtorak');\r\ncontainer.execute(function (name, surname) { console.log(surname); });\r\n```\r\n\r\nbecause output will be something like this:\r\n```JavaScript\r\na.set('surname', 'Półtorak');\r\na.execute(function (b, c) { console.log(c); });\r\n```\r\n\r\nexdi will try to match container using \"c\" as name. There is no such variable.\r\nSo if we think that our code will be minified, we should use syntax like that:\r\n```JavaScript\r\ncontainer.set('surname', 'Półtorak');\r\ncontainer.execute(['name', 'surname', function (name, surname) { console.log(surname); }]);\r\n```\r\n\r\nso mimified code will look like this:\r\n```JavaScript\r\na.set('surname', 'Półtorak');\r\na.execute(['name', 'surname', function (b, c) { console.log(c); }]);\r\n```\r\n\r\nMimifiers do not change strings. This way exdi can match variable name from array with function arguments.\r\nJust remember that exdi accept only non-empty array with last argument to be function.\r\nAnd every element before that function should be string or valid number (finite, not NaN).\r\n\r\n## 1.2.0\r\n\r\n* some bugfixing\r\n* timeout added\r\n* .execute() for both parallel and queue now have callback called on finish\r\n* .run() added as .execute() callback\r\n* all callbacks are called async by process.nextTick (node) or setTimeout (browser)\r\n\r\n## 1.1.7\r\n\r\nNew feature called parallel. Similar to Queue but all register callbacks are run at the same time, one after another using loop.\r\nEach callback have parameter exdiDone (as always, order of parameters does not matter).\r\nTask must call from inside function exdiDone passed in arguments (just like in queue).\r\n\r\nEach time callback call exdiDone, event is emitted. If it was last callback on the list, \"done\" event will be emitted. If not, \"step\" event.\r\nJust like in example.\r\n\r\n*This feature is not fully tested*. Library passed all tests for container. There is no test coverage for queue and parallel.\r\n\r\n```JavaScript\r\n'use strict';\r\n\r\nvar exdi = require(__dirname + '/../src/exdi.js');\r\n\r\nvar container = exdi.create();\r\ncontainer.set('x', 1);\r\n\r\nvar parallel = container.createParallel();\r\n\r\nparallel.add(function (exdiDone) {\r\n    var c = this;\r\n    setTimeout(function () {\r\n        c.set('y', 2);\r\n        exdiDone();\r\n    }, 1000);\r\n});\r\n\r\nparallel.add(function (exdiDone) {\r\n    var c = this;\r\n    setTimeout(function () {\r\n        c.set('z', 4);\r\n        exdiDone();\r\n    }, 3000);\r\n});\r\n\r\nparallel.on('step', function () {\r\n    console.log('step done');\r\n});\r\n\r\nparallel.on('done', function (x,y,z) {\r\n    console.log(x + y + z);\r\n});\r\n\r\nparallel.execute();\r\n```\r\n\r\n## 1.1.6\r\n\r\n*BUGFIX*\r\nMimified version was not generated\r\n\r\n## 1.1.5\r\n\r\nNow you can select context for queue fn to run\r\n\r\n```JavaScript\r\nqueue.add(function (exdiDone, age) {\r\n    this.set('name', 'Dariusz');\r\n    this.set('age', age || 0);\r\n    exdiDone();\r\n}, {\r\n    age: 26\r\n},\r\nmyObject);\r\n```\r\n\r\n## 1.1.4\r\n\r\nContainer queue added. Now you can create queue of async functions that will be executed using container as context.\r\nThis feature is experimental.\r\nUsage:\r\n\r\n```JavaScript\r\nvar exdi = require('exdi');\r\n\r\nvar container = exdi.create();\r\nvar queue = container.createQueue();\r\n\r\ncontainer.set('MyConstructor', function () {\r\n    return 'And this is my constructor example. Hehe :]';\r\n})\r\n\r\nqueue.add(function (exdiDone, age) {\r\n    this.set('name', 'Dariusz');\r\n    this.set('age', age || 0);\r\n    exdiDone();\r\n}, {\r\n    age: 26\r\n});\r\n\r\nqueue.add(function (exdiDone) {\r\n    this.set('surname', 'Półtorak');\r\n    exdiDone();\r\n});\r\n\r\nqueue.add(function (exdiDone, MyConstructor) {\r\n    console.log(this.get('name') + ' ' + this.get('surname') + ', age: ' + this.get('age'));\r\n    console.log(MyConstructor);\r\n    exdiDone();\r\n});\r\n\r\nqueue.run();\r\n```\r\n\r\n## 1.1.2\r\n\r\n* fixes .execute(). Now there is a third parameter - execution context. If no context object is provided, function is executed using container as context.\r\n\r\nIn other words, when you are executing function or getting \"constructor\" from container, this of that function will be pointing to given object or container itself.\r\n\r\nTo do that, do:\r\n```JavaScript\r\nexdi.execute(myFunction, [ my: 'params' ], someObject);\r\n```\r\nor\r\n```JavaScript\r\nexdi.get('SomeConstructor', [ my: 'params' ], someObject);\r\n```\r\nwhere some object is... well some object and function under \"SomeConstructor\" will be called in the same way like this:\r\nsomeObject.someConstructor([ my: 'params' ]).\r\n\r\n\r\n## 1.1.1\r\n\r\nTo install exdi use\r\n```JavaScript\r\nnpm install exdi\r\n```\r\nor add nesesery dependency into package.json and then execute \r\n```JavaScript\r\nnpm install\r\n```\r\nThen include exdi into your project.\r\n```JavaScript\r\nvar exdi = require('exdi');\r\n```\r\nNow it is time to create your first container.\r\n```JavaScript\r\nvar myContainer = exdi.get('myContainer');\r\n```\r\nIf you don't want container to be registered in exdi for some reason, you can always create anonymous container.\r\n```JavaScript\r\nvar myNotRegisteredContainer = exdi.create();\r\n```\r\nNow every time you execute **exdi.get('myContainer');** same container will be returned. If container under given name is not present, new container will be created. So **watch out for misspells**.\r\nEvery time you use **exdi.create();** new container will be returned.\r\n\r\nNow to set value, you just need to use:\r\n```JavaScript\r\nmyContainer.set('myValue', 5);\r\n```\r\nTo get value use:\r\n```JavaScript\r\nmyContainer.get('myValue'); // will return 5\r\n```\r\nTo make sure you don't get undefined value, set default value when you request parameter:\r\n```JavaScript\r\nmyContainer.get('myMissingValue', 4); // will return 4\r\n```\r\nExdi follow simple convention.\r\n> Every value name that starts with capital letter is a constructor. So only acceptable value is a **function**.\r\n> Every value name that starts with small letter have simple value.\r\n> Difference between constructos and other parameters is that constructors are execute every time you are trying to get them.\r\n\r\nSo if you do something like this:\r\n```JavaScript\r\nmyContainer.set('Builder', 'Hello world');\r\n```\r\nExdi will **throw an error**.\r\nThis will work:\r\n```JavaScript\r\nmyContainer.set('Builder', function () {\r\n    return 'Hello world';\r\n});\r\nmyContainer.get('Builder'); // Hello world\r\n```\r\nBuilders can use all container parameters, including other builders.\r\n```JavaScript\r\nmyContainer.set('Builder', function (luckyNumber) {\r\n    return 'Lucky number ' + luckyNumber;\r\n});\r\nmyContainer.set('luckyNumber', 7);\r\nmyContainer.get('Builder'); // Lucky number 7\r\n```\r\nor\r\n```JavaScript\r\nmyContainer.set('Builder', function (LuckyNumber) {\r\n    return 'Lucky number ' + LuckyNumber;\r\n});\r\nmyContainer.set('LuckyNumber', function () {\r\n  return 'IS 7';\r\n});\r\nmyContainer.get('Builder'); // Lucky number IS 7\r\n```\r\nYou can also execute any function with container parameters.\r\n```JavaScript\r\nfunction showX(x, y) {\r\n    return x + ' ' + y;\r\n}\r\n\r\nmyContainer.set('x', 5);\r\nmyContainer.set('y', 5);\r\nmyContainer.execute(showXY);\r\n```\r\nAnd if you need to overwrite one of the container parameters (or provide new), you can always pass object as second parameter of execute:\r\n```JavaScript\r\nmyContainer.execute(showXY, {\r\n    y: 1\r\n});\r\n```\r\nYou can even have builders in builders:\r\n```JavaScript\r\nmyContainer.set('One', function () {\r\n    return 'THIS';\r\n});\r\nmyContainer.set('Two', function (One) {\r\n    return One + ' IS';\r\n});\r\nmyContainer.set('Three', function (Two) {\r\n    return Two + ' SPARTA!';\r\n});\r\nmyContainer.get('Three'); // THIS IS SPARTA!\r\n```\r\nAnd there is no reason why you should not have containers in containers:\r\n```JavaScript\r\nmyContainer2 = exdi.get('myContainer2');\r\nmyContainer.set('x', 1);\r\nmyContainer2.set('x', 2);\r\n\r\nmyContainer2.set('c', myContainer);\r\n\r\nmyContainer2.set('Test', function (c, x) {\r\n    return x + c.get('x');\r\n});\r\n\r\nmyContainer2.get('Test'); // Should be 3\r\n```\r\nQuite useful if you ask me.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}